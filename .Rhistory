cat("Your variable " input " is a matrix")
else if (is.data.frame(input)==TRUE)
cat (input)
else
("Your variable  is neither a matrix nor a dataframe \n")
test_func<- function (input)
if (is.matrix(input)==TRUE)
cat("Your variable is a matrix")
else if (is.data.frame(input)==TRUE)
cat ("Your variable is a data frame")
else
("Your variable  is neither a matrix nor a dataframe \n")
test_func<- function (input)
if (is.matrix(input)==TRUE)
cat("Your variable is a matrix")
else if (is.data.frame(input)==TRUE)
cat ("Your variable is a data frame" "\n")
else
("Your variable  is neither a matrix nor a dataframe \n")
test_func<- function (input)
if (is.matrix(input)==TRUE)
cat("Your variable is a matrix")
else if(is.data.frame(input)==TRUE)
cat ("Your variable is a data frame")
test_func<- function (input)
if (is.matrix(input)==TRUE)
cat("Your variable is a matrix")
else(is.data.frame(input)==TRUE)
cat ("Your variable is a data frame")
est_func<- function (input)
if (is.matrix(input)==TRUE)
cat("Your variable is a matrix")
else if(is.data.frame(input)==TRUE)
cat ("Your variable is a data frame")
test_func<- function (input)
if (is.matrix(input)==TRUE)
cat("Your variable is a matrix")
else
cat ("Your variable is not a matrix")
test_func<- function (input)
{
if (is.matrix(input)==TRUE)
{
cat("Your variable is a matrix")
}
else
cat ("Your variable is not a matrix")
}
test_func<- function (input)
{
if (is.matrix(input)==TRUE)
{
cat("Your variable is a matrix")
}
else if (is.data.frame(input)==TRUE)
cat ("Your variable is a dataframe")
else
cat ("Your variable is neither a matrix nor a data frame")
}
test_func(pressure)
test_func(input = mtcars)
test_func(input = as.matrix(pressure))
save.image(".RData")
q()
install.packages("ggthemes")
install.packages("ggspatial")
library(sf)
India_States<- read_sf(dsn = "Shapefiles/india/India_States.shp")
View(India_States)
library(ggplot2)
library(ggspatial)
library(ggthemes)
library(sf )
ggplot()+geom_sf(data = India_States)
library(readxl)
Primary_Census_Abstract_Total_Table_For_India <- read_excel("Shapefiles/india/Primary Census Abstract Total Table For India.xlsx")
View(Primary_Census_Abstract_Total_Table_For_India)
View(Primary_Census_Abstract_Total_Table_For_India)
###choropleth plotting using Census Data
#Import census data in R environment using read_excel()
#Import Shapefile data using read_sf()
#Subset the PCA data to our requirement
subset(x = Primary_Census_Abstract_Total_Table_For_India, subset = TRU==Total&Name!=India)
###choropleth plotting using Census Data
#Import census data in R environment using read_excel()
#Import Shapefile data using read_sf()
#Subset the PCA data to our requirement
subset(x = Primary_Census_Abstract_Total_Table_For_India, subset = TRU=="Total"&Name!="India")
###choropleth plotting using Census Data
#Import census data in R environment using read_excel()
#Import Shapefile data using read_sf()
#Subset the PCA data to our requirement
subset(x = Primary_Census_Abstract_Total_Table_For_India, subset = TRU=="Total"&Leve=="STATE")
###choropleth plotting using Census Data
#Import census data in R environment using read_excel()
#Import Shapefile data using read_sf()
#Subset the PCA data to our requirement
subset(x = Primary_Census_Abstract_Total_Table_For_India, subset = TRU=="Total"&Level=="STATE")
###choropleth plotting using Census Data
#Import census data in R environment using read_excel()
#Import Shapefile data using read_sf()
#Subset the PCA data to our requirement
PCA_Census<- subset(x = Primary_Census_Abstract_Total_Table_For_India, subset = TRU=="Total"&Level=="STATE", select = c("No_HH", "TOT_P", "TOT_M", "TOT_F"))
View(PCA_Census)
###choropleth plotting using Census Data
#Import census data in R environment using read_excel()
#Import Shapefile data using read_sf()
#Subset the PCA data to our requirement
PCA_Census<- subset(x = Primary_Census_Abstract_Total_Table_For_India, subset = TRU=="Total"&Level=="STATE", select = c("Name","No_HH", "TOT_P", "TOT_M", "TOT_F"))
View(PCA_Census)
toupper(India_States$NAME_1)
#PCA data frame and shapefile Attribute data manipulation to facilitate merge with shapefile
India_States$NAME_1<- toupper(India_States$NAME_1)
India_States$NAME_1
fix(PCA_Census)
edit(PCA_Census)
PCA_Census$Name[PCA_Census$Name=="JAMMU & KASHMIR"]<- c("JAMMU AND KASHMIR")
PCA_Census$Name[PCA_Census$Name=="ANDAMAN & NICOBAR ISLANDS"]<- c("ANDAMAN AND NICOBAR ISLANDS")
PCA_Census$Name[PCA_Census$Name=="DADRA & NAGAR HAVELI
"]<- c("DADRA AND NAGAR HAVELI")
PCA_Census$Name[PCA_Census$Name=="DADRA & NAGAR HAVEL"]<- c("DADRA AND NAGAR HAVELI")
PCA_Census$Name[PCA_Census$Name=="DADRA & NAGAR HAVELI"]<- c("DADRA AND NAGAR HAVELI")
PCA_Census$Name[PCA_Census$Name=="DAMAN & DIU"]<- c("DAMAN AND DIU")
View(India_States$NAME_1)
head(India_States$NAME_1)
tail(India_States$NAME_1)
India_States$NAME_1[India_States$NAME_1==grepl("O")]
India_States$NAME_1[India_States$NAME_1==grepl(India_States$NAME_1,"O")]
India_States$NAME_1[India_States$NAME_1==grep("O")]
grep("O", India_States$NAME_1)
grep("Od", India_States$NAME_1)
grep("Or", India_States$NAME_1)
grep("Or*", India_States$NAME_1)
India_States$NAME_1[2]
India_States$NAME_1[12]
India_States$NAME_1[23]
India_States$NAME_1[24]
India_States$NAME_1[26]
PCA_Census$Name[PCA_Census$Name=="ODISHA"]
PCA_Census$Name[PCA_Census$Name=="ODISHA"]<- C("ORISSA")
PCA_Census$Name[PCA_Census$Name=="ODISHA"]<- c("ORISSA")
head(India_States)
#After renaming and data cleaning. Perform Merge
merge.data.frame(x = India_States, y = PCA_Census, by.x = "NAME_1", by.y="Name")
#After renaming and data cleaning. Perform Merge
India_States_2<- merge.data.frame(x = India_States, y = PCA_Census, by.x = "NAME_1", by.y="Name")
View(India_States_2)
coord_sf(India_States_2)
#Retrieve the spatial characteristic of the new dataframe
India_States_2<- st_as_sf(India_States_2)
coord_sf(India_States_2)
coord_sf(India_States_)
coord_sf(India_States)
#Plot the choropleth
ggplot(data = India_States_2)+geom_sf()
head(India_States_2)
#Plot the choropleth
ggplot(data = India_States_2)+geom_sf(mapping = aes(fill=TOT_P))+scale_fill_continuous_tableau(palette = "Blues")+labs("Total Population")
#Plot the choropleth
ggplot(data = India_States_2)+geom_sf(mapping = aes(fill=TOT_P))+scale_fill_continuous_tableau(palette = "Red")+labs("Total Population")
head(India_States_2)
#Plot the choropleth
ggplot(data = India_States_2)+geom_sf(mapping = aes(fill=TOT_F))+scale_fill_continuous_tableau(palette = "Red")+labs("Total Population")
ggplot(data = India_States_2)+geom_sf(mapping = aes(fill=cut_interval(TOT_F, 7)))+labs("Total Population")
ggplot(data = India_States_2)+geom_sf(mapping = aes(fill=cut_interval(TOT_F, 7)))+labs(fill="Total Population")
save.image(".RData")
q()
#plot Boundary + cities
ggplot(data=India_Boundary)+geom_sf()+geom_sf(data = India_Cities)+geom_sf_text(data = India_Cities, mapping = aes(label=city), size=2, nudge_x = -0.2, nudge_y = -0.2)+ annotation_north_arrow(height = unit(2.5 , "cm"), width = unit(1.5, "cm"), pad_x = unit(1, "cm"),pad_y = unit(1.5, "cm")) + annotation_scale(line_width = 1)
library(ggplot2)
library(ggspatial)
library(ggthemes)
library(sf)
#Plot the choropleth
ggplot(data = India_States_2)+geom_sf(mapping = aes(fill=TOT_F))+scale_fill_continuous_tableau(palette = "Red")+labs("Total Population")
#Plot the choropleth
ggplot(data = India_States_2)+geom_sf(mapping = aes(fill=TOT_F))+scale_fill_continuous_tableau(palette = "Red")+labs(fill = "Total Population")
library()
library(dplyr)
library(ggplot2)
library(ggspatial)
library(ggthemes)
library(sf)
#Attribute data selection
Global_Data_UHI<- st_read(dsn = "Shapefiles/india/sdei-global-uhi-2013-shp/sdei-global-uhi-2013-shp/shp/sdei-global-uhi-2013.shp")
#Visualise the data
ggplot(data = Global_Data_UHI)+geom_sf()
View(Global_Data_UHI)
grepl("IND", Global_Data_UHI$ISO3)
subset(x = Global_Data_UHI, subset = grepl("IND", Global_Data_UHI$ISO3))
#Abstract India's data
Indian_HeatIsland<- subset(x = Global_Data_UHI, subset = grepl("IND", Global_Data_UHI$ISO3))
#Visualise Indian abstracted data
ggplot(data = Indian_HeatIsland) +geom_sf()
ggplot(data = Indian_HeatIsland)+geom_sf(mapping = aes(fill = URB_D_MEAN))+scale_fill_continuous_tableau(palette = "Red")+labs(fill = "LST", title = "Average Summer Daytime Max LST", subtitle = "Indian Region")
st_crs(Indian_HeatIsland)
st_bbox(Indian_HeatIsland)
st_bbox(Habitation)
st_crs(Habitation)
st_area(Indian_HeatIsland)
bbox(Indian_HeatIsland)
st_bbox(Indian_HeatIsland)
st_crop(Indian_HeatIsland, xmin = 75, ymin = 15, xmax = 80, ymax=25)
Indian_HeatIsland
Cropped_Indian_UIH<- st_crop(Indian_HeatIsland, xmin = 75, ymin = 15, xmax = 80, ymax=25)
# Does it Crop?
ggplot(data = Cropped_Indian_UIH)+geom_sf()
st_bbox(xmin=76 , ymin=16 , xmax=78 , ymax=22)
st_bbox(obj = Cropped_Indian_UIH, xmin=76 , ymin=16 , xmax=78 , ymax=22)
bbox<- st_bbox(obj = Cropped_Indian_UIH, xmin=76 , ymin=16 , xmax=78 , ymax=22)
st_crop(Indian_HeatIsland, bbox)
Indian_HeatIsland_Cropped<- st_crop(Indian_HeatIsland, bbox)
ggplot(data = Indian_HeatIsland_Cropped)+geom_sf()
#Plot the UIH in the new extents
ggplot(data = Indian_HeatIsland_Cropped)+geom_sf(mapping = aes(fill = URB_D_MEAN))
#Plot the UIH as intervals
ggplot(data = Indian_HeatIsland_Cropped)+geom_sf(mapping = aes(fill = cut_interval(x = URB_D_MEAN, 5)))
#Plot the UIH as intervals
ggplot(data = Indian_HeatIsland_Cropped)+geom_sf(mapping = aes(fill = cut_interval(x = URB_D_MEAN, 5)))+labs(fill = "LST", title = "Average Summer Daytime Max LST", subtitle = "Indian Region")
#Plot the UIH as intervals
ggplot(data = Indian_HeatIsland_Cropped$URB_D_MEAN>40)+geom_sf(mapping = aes(fill = cut_interval(x = URB_D_MEAN, 5)))+labs(fill = "LST", title = "Average Summer Daytime Max LST", subtitle = "Indian Region")
#Plot the UIH as intervals
ggplot(data = Indian_HeatIsland_Cropped$URB_D_MEAN>40)+geom_sf()+labs(fill = "LST", title = "Average Summer Daytime Max LST", subtitle = "Indian Region")
ggplot(data = Indian_HeatIsland_Cropped)+geom_sf(mapping = aes(fill = cut_interval(x = URB_D_MEAN, 5)))+labs(fill = "LST", title = "Average Summer Daytime Max LST", subtitle = "Indian Region")
q()
#Plot the UIH as intervals
ggplot(data = Indian_HeatIsland_Cropped)+geom_sf(mapping = aes(fill = cut_interval(x = URB_D_MEAN, 5)))+labs(fill = "LST", title = "Average Summer Daytime Max LST", subtitle = "Indian Region")
library(ggplot2)
library(ggspatial)
library(ggthemes)
library(sf)
#Plot the UIH as intervals
ggplot(data = Indian_HeatIsland_Cropped)+geom_sf(mapping = aes(fill = cut_interval(x = URB_D_MEAN, 5)))+labs(fill = "LST", title = "Average Summer Daytime Max LST", subtitle = "Indian Region")
st_crs(Indian_HeatIsland_Cropped_HeatIsland)
st_crs(Indian_HeatIsland_Cropped)
library(ggplot2)
st_crs(Indian_HeatIsland_Cropped)
q()
library(ggplot2)
library(ggspatial)
library(ggthemes)
library(sf)
ggplot(data = Cropped_Indian_UIH)+geom_sf()
View(Cropped_Indian_UIH)
st_crs(Cropped_Indian_UIH)
st_area(Cropped_Indian_UIH)
Cropped_Indian_UIH$Area<- st_area(Cropped_Indian_UIH)
Cropped_Indian_UIH$Centroid<- st_centroid(Cropped_Indian_UIH)
plot(Cropped_Indian_UIH$Centroid)
Cropped_Indian_UIH[NAME]
Cropped_Indian_UIH["NAME"]
Cropped_Indian_UIH[c("NAME", "ES00POP", "SQKM_FINAL", "URB_D_MEAN")]
as.data.frame(Cropped_Indian_UIH[c("NAME", "ES00POP", "SQKM_FINAL", "URB_D_MEAN")])
plot(Cropped_Indian_UIH$Centroid)
library(ggplot2)
library(ggspatial)
library(ggthemes)
library(sf)
library(dplyr)
Cropped_Indian_UIH %>% filter(BUF_D_MEAN > 35)
#plotting based on Query
ggplot(data = Indian_HeatIsland_Cropped%>% filter(URB_D_MEAN>=40)) + geom_sf()
summary(lm (URB_D_MEAN ~ES00POP, data = Cropped_Indian_UIH)
)
summary(lm (URB_D_MEAN ~SQKM_FINAL, data = Cropped_Indian_UIH))
summary(Cropped_Indian_UIH$SQKM_FINAL)
#plotting based on Query
ggplot(data = Indian_HeatIsland_Cropped%>% filter(URB_D_MEAN>=40&SQKM_FINAL>100)) + geom_sf()
#plotting based on Query
ggplot(data = Indian_HeatIsland_Cropped%>% filter(URB_D_MEAN>=40&SQKM_FINAL>100)) + geom_sf(mapping = aes(fill = URB_D_MEAN))
#plotting based on Query
ggplot(data = Indian_HeatIsland_Cropped%>% filter(URB_D_MEAN>=40&SQKM_FINAL>100)) + geom_sf(mapping = aes(fill = URB_D_MEAN))+geom_tile()
#plotting based on Query
ggplot(data = Indian_HeatIsland_Cropped%>% filter(URB_D_MEAN>=40&SQKM_FINAL>100)) + geom_point(mapping = aes(fill = URB_D_MEAN))
#plotting based on Query
ggplot(data = Indian_HeatIsland_Cropped%>% filter(URB_D_MEAN>=40&SQKM_FINAL>100)) + geom_point()
cut(Indian_HeatIsland_Cropped$URB_D_MEAN)
cut(Indian_HeatIsland_Cropped$URB_D_MEAN,breaks = 5)
table(cut(Indian_HeatIsland_Cropped$URB_D_MEAN,breaks = 5))
#Create centroids for the respective polygons of the multipolygon shapefile
Indian_HeatIsland_Cropped_Centroid<- st_centroid(x = Indian_HeatIsland_Cropped)
st_centroid(x = Indian_HeatIsland_Cropped)
#Create centroids for the respective polygons of the multipolygon shapefile
Indian_HeatIsland_Cropped_Centroid<- st_centroid(x = Indian_HeatIsland_Cropped)
st_crs(Indian_HeatIsland_Cropped_Centroid)
table(cut(Indian_HeatIsland_Cropped$URB_D_MEAN,breaks = 5))
Cropped_Indian_UIH$Buffer_Temp[Cropped_Indian_UIH$URB_D_MEAN<=35.5&Cropped_Indian_UIH$URB_D_MEAN>29.6]= c(5)
Cropped_Indian_UIH$Buffer_Temp[Cropped_Indian_UIH$URB_D_MEAN<=41.4&Cropped_Indian_UIH$URB_D_MEAN>35.5]= c(15)
Cropped_Indian_UIH$Buffer_Temp[Cropped_Indian_UIH$URB_D_MEAN<=47.4&Cropped_Indian_UIH$URB_D_MEAN>41.4]= c(25)
Cropped_Indian_UIH$Buffer_Temp[Cropped_Indian_UIH$URB_D_MEAN<=53.3&Cropped_Indian_UIH$URB_D_MEAN>47.4]= c(35)
Cropped_Indian_UIH$Buffer_Temp[Cropped_Indian_UIH$URB_D_MEAN<=59.2&Cropped_Indian_UIH$URB_D_MEAN>53.3]= c(40)
View(Cropped_Indian_UIH)
Indian_HeatIsland_Cropped_Centroid$Buffer_Temp[Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN<=35.5&Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN>29.6]= c(5)
Indian_HeatIsland_Cropped_Centroid$Buffer_Temp[Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN<=41.4&Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN>35.5]= c(15)
Indian_HeatIsland_Cropped_Centroid$Buffer_Temp[Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN<=47.4&Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN>41.4]= c(25)
Indian_HeatIsland_Cropped_Centroid$Buffer_Temp[Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN<=53.3&Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN>47.4]= c(35)
Indian_HeatIsland_Cropped_Centroid$Buffer_Temp[Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN<=59.2&Indian_HeatIsland_Cropped_Centroid$URB_D_MEAN>53.3]= c(40)
View(Indian_HeatIsland_Cropped_Centroid)
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf()
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(size= Buffer_Temp)
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(mapping = aes(size= Buffer_Temp))
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(mapping = aes(size= Buffer_Temp), color= Buffer_Temp)
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(mapping = aes(size= Buffer_Temp,color= Buffer_Temp))
library(RColorBrewer)
display.brewer.all()
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(mapping = aes(size= Buffer_Temp,color= Buffer_Temp))+ scale_fill_brewer(palette = "Accent")
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(mapping = aes(size= Buffer_Temp))+ scale_fill_brewer(palette = "Accent")
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(mapping = aes(size= Buffer_Temp))+ scale_color_brewer(palette = "Accent")
#Obtain basic heat map without dissolving the shapefile boundaries of the cities. (Note: This map obscures detailed information on the maximum summer day time temperature)
ggplot(data = Indian_HeatIsland)+geom_sf(mapping = aes(fill = URB_D_MEAN))+scale_fill_continuous_tableau(palette = "Red")+labs(fill = "LST", title = "Average Summer Daytime Max LST", subtitle = "Indian Region")
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(mapping = aes(size= Buffer_Temp))+ scale_fill_continuous_tableau(palette = "Red")
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(mapping = aes(fill= Buffer_Temp))+ scale_fill_continuous_tableau(palette = "Red")
#Plot using the buffer value
ggplot(data = Indian_HeatIsland_Cropped_Centroid)+geom_sf(mapping = aes(size= Buffer_Temp))+ scale_color_discrete(palette = "Red")
Indian_HeatIsland_Cropped_UTM<- st_transform(x = Indian_HeatIsland_Cropped, crs = 32644)
st_crs(Indian_HeatIsland_Cropped_UTM)
save.image(file=".RData")
q()
library(ggplot2)
library(ggspatial)
library(ggthemes)
library(sf)
rbind(c(19.128775541189796, 72.89765626617037), c(19.135181645353818, 72.89911538787672), c(19.134046404503426, 72.90581018158814), c(19.133559870321406, 72.9119899911679), c(19.129180998185518, 72.91465074251475), c(19.125937314355806, 72.91422158907173), c(19.120585096813034, 72.90838510224637), c(19.12050400127468, 72.90821344086915))
points_matrix<- rbind(c(19.128775541189796, 72.89765626617037), c(19.135181645353818, 72.89911538787672), c(19.134046404503426, 72.90581018158814), c(19.133559870321406, 72.9119899911679), c(19.129180998185518, 72.91465074251475), c(19.125937314355806, 72.91422158907173), c(19.120585096813034, 72.90838510224637), c(19.12050400127468, 72.90821344086915))
colnames(points_matrix)<- c("Lat", "Long")
#Using method 1 by converting the matrix in to a dataframe.
points_df <- as.data.frame(points_matrix)
str(points_df)
#Convert the lat - long dataframe in to an simple features object.
st_as_sf(x = points_df, coords = c("Lat", "Long"))
#Convert the lat - long dataframe in to an simple features object.
st_as_sf(x = points_df, coords = c("Lat", "Long"), crs= 4326)
#Convert the lat - long dataframe in to an simple features object.
Powai_lake_points_sf<- st_as_sf(x = points_df, coords = c("Lat", "Long"), crs= 4326)
st_geometry(Powai_lake_points_sf)
st_crs(Powai_lake_points_sf)
#Plot the points using ggplot()
ggplot()+geom_sf(Powai_lake_points_sf)
#Plot the points using ggplot()
ggplot()+geom_sf(data = Powai_lake_points_sf)
#Using method 2 where a matrix is forced as a spatial object
st_multipoint(points_matrix)
View(Road_Network)
#Plotting a multi-line from a matrix of lat long
st_multilinestring(list(points_matrix))
# Creating a multi-line geometry from a matrix of lat long
multiline_powai<- st_multilinestring(list(points_matrix))
plot(multiline_powai)
#Also create a polygon or a multi - polygon geometry from the matrix of points.
singlepolygon_powai<- st_polygon(list(points_matrix))
st_polygon(list(points_matrix))
list(c(1,2), c(3,4), c(4,5), c(1,7), c(3,2))
test_polygon<- list(c(1,2), c(3,4), c(4,5), c(1,7), c(3,2))
test_polygon
st_polygon(test_polygon)
test_polygon<- rbind(c(1,2), c(3,4), c(4,5), c(1,7), c(3,2))
st_polygon(list(test_polygon))
st_polygon(list(test_polygon), dim = 2)
#Also create a polygon or a multi - polygon geometry from the matrix of points.
#singlepolygon_powai<- st_polygon(list(points_matrix))
polygon_border <- rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))
st_polygon(list(polygon_border))
polygon_border_sf<- st_polygon(list(polygon_border))
plot(polygon_border_sf)
#Create a simple polygon geometry from matrix of points
points_matrix_2<- rbind(c(19.128775541189796, 72.89765626617037), c(19.135181645353818, 72.89911538787672), c(19.134046404503426, 72.90581018158814), c(19.133559870321406, 72.9119899911679), c(19.129180998185518, 72.91465074251475), c(19.125937314355806, 72.91422158907173), c(19.120585096813034, 72.90838510224637), c(19.12050400127468, 72.90821344086915), c(19.128775541189796, 72.89765626617037))
polygon(list(points_matrix_2))
polygon(list(points_matrix_2), crs= 4326)
multiline_powai
#Create a simple polygon geometry from matrix of points
points_matrix_2<- rbind(c(19.128775541189796, 72.89765626617037), c(19.135181645353818, 72.89911538787672), c(19.134046404503426, 72.90581018158814), c(19.133559870321406, 72.9119899911679), c(19.129180998185518, 72.91465074251475), c(19.125937314355806, 72.91422158907173), c(19.120585096813034, 72.90838510224637), c(19.12050400127468, 72.90821344086915), c(19.128775541189796, 72.89765626617037))
points_matrix_2
colnames(points_matrix_2)<- c("X", "Y")
list(points_matrix_2)
list(polygon_border)
st_polygon(list(points_matrix_2), coord= c("X", "Y"))
st_as_sf(as.data.frame(points_matrix_2), coords = c("X","Y"))
st_polygon(list(points_matrix_2), coords = c("X", "Y"))
st_polygon(list(points_matrix_2))
st_polygon(list(points_matrix_2))
polygon(list(points_matrix_2))
colnames(points_matrix_2)<- c("X", "Y")
polygon(list(points_matrix_2))
#Create a simple polygon geometry from matrix of points
points_matrix_2<- rbind(c(19.128775541189796, 72.89765626617037), c(19.135181645353818, 72.89911538787672), c(19.134046404503426, 72.90581018158814), c(19.133559870321406, 72.9119899911679), c(19.129180998185518, 72.91465074251475), c(19.125937314355806, 72.91422158907173), c(19.120585096813034, 72.90838510224637), c(19.12050400127468, 72.90821344086915), c(19.128775541189796, 72.89765626617037))
colnames(points_matrix_2)<- c("X", "Y")
polygon(list(points_matrix_2))
polygon(list(points_matrix_2))
list(points_matrix_2)
st_polygon(list(points_matrix_2), coords = c("X", "Y"))
#Create a simple polygon geometry from matrix of points
points_matrix_2<- rbind(c(19.128775541189796, 72.89765626617037), c(19.135181645353818, 72.89911538787672), c(19.134046404503426, 72.90581018158814), c(19.133559870321406, 72.9119899911679), c(19.129180998185518, 72.91465074251475), c(19.125937314355806, 72.91422158907173), c(19.120585096813034, 72.90838510224637), c(19.12050400127468, 72.90821344086915), c(19.128775541189796, 72.89765626617037))colnames(points_matrix_2)<- c("X", "Y")
#Create a simple polygon geometry from matrix of points
points_matrix_2<- rbind(c(19.128775541189796, 72.89765626617037), c(19.135181645353818, 72.89911538787672), c(19.134046404503426, 72.90581018158814), c(19.133559870321406, 72.9119899911679), c(19.129180998185518, 72.91465074251475), c(19.125937314355806, 72.91422158907173), c(19.120585096813034, 72.90838510224637), c(19.12050400127468, 72.90821344086915), c(19.128775541189796, 72.89765626617037))
list(points_matrix_2)
st_polygon(list(points_matrix_2))
polygon(list(points_matrix_2))
st_polygon(list(points_matrix_2))
powai_polygon_sf<-  polygon(list(points_matrix_2))
powai_polygon_sf<-  st_polygon(list(points_matrix_2))
plot(powai_polygon_sf)
ggplot()+geom_sf(data = powai_polygon_sf)
st_transform(powai_polygon_sf, crs = 32643)
st_crs(India_States)
#Reprojection to UTM zone 43 N using the EPSG code 32643
India_States_UTM<- st_transform(India_States, crs = 32643)
#Simplify Geometry
India_States_UTM_simplified<- st_simplify(India_States_UTM)
plot(India_States_UTM$geometry)
plot(India_States_UTM_simplified$geometry)
plot(India_States_UTM$geometry)
plot(India_States_UTM_simplified$geometry)
library(dplyr)
View(India_States_UTM)
India_States_UTM %>% filter(NAME_1= "ASSAM")
India_States_UTM %>% filter(NAME_1== "ASSAM")
plot(India_States_UTM %>% filter(NAME_1== "ASSAM"))
st_simplify(India_States_UTM %>% filter(NAME_1== "ASSAM"))
Assam_Simplified<- st_simplify(India_States_UTM %>% filter(NAME_1== "ASSAM"))
plot(Assam_Simplified)
India_States_UTM %>% filter(NAME_1== "ASSAM")
st_geometry(India_States_UTM %>% filter(NAME_1== "ASSAM"))
ggplot()+geom_sf(data = Assam_Simplified)
ggplot()+geom_sf(data = India_States_UTM %>% filter(NAME_1== "ASSAM"))
# Creating centroids
India_States_UTM_simplified_centroids<- st_point_on_surface(India_States_UTM_simplified)
ggplot()+geom_sf(data=India_States_UTM_simplified)+geom_sf(data=India_States_UTM_simplified_centroids)
View(India_States_UTM_simplified_centroids)
st_distance(x = India_States_UTM_simplified_centroids%>% filter(NAME_1=="CHANDIGARH"), y = India_States_UTM_simplified_centroids%>% filter(NAME_1=="DELHI"))
233701.1/1000
plot(Road_Network)
plot(Road_Network$geometry)
st_length(Road_Network)
save.image(file = ".RData")
q()
library(ggplot2)
library(ggspatial)
library(ggthemes)
library(sf)
#Get a matrix
plot(Habitation$geometry)
Habitation_Buffer_400<- st_buffer(x = Habitation, dist = 400)
Road_Buffer_70<- st_buffer(x = Road_Network, dist = 70)
ggplot()+ geom_sf(data = Habitation_Buffer_400, fill = "Yellow") + geom_sf(data = Habitation, size=2, color = "Red")
Habitation_Buffer_1000<- st_buffer(x = Habitation, dist = 1000)
ggplot()+ geom_sf(data = Habitation_Buffer_1000, fill = "Yellow") + geom_sf(data = Habitation, size=1, color = "Red")
View(Habitation)
ggplot()+ geom_sf(data = Habitation_Buffer_1000, fill = "Yellow") + geom_sf(data = Habitation, size=1, color = "Red") + geom_sf_text(data = Habitation, aes(fill = Hab_Name))
ggplot()+ geom_sf(data = Habitation_Buffer_1000, fill = "Yellow") + geom_sf(data = Habitation, size=1, color = "Red") + geom_sf_text(data = Habitation, aes(label  = Hab_Name))
ggplot()+ geom_sf(data = Road_Buffer_70, fill = "Yellow") + geom_sf(data = Road_Network, color = "Red")
Road_Buffer_200<- st_buffer(x = Road_Network, dist = 200)
ggplot()+ geom_sf(data = Road_Buffer_200, fill = "Yellow") + geom_sf(data = Road_Network, color = "Red")
help ("st_contains")
st_contains(x = Habitation_Buffer_1000, y = Road_Network)
View(Road_Network)
ggplot()+ geom_sf(data = Habitation_Buffer_1000, fill = "Yellow") + geom_sf(data = Habitation, size=1, color = "Red") + geom_sf_text(data = Habitation, aes(label  = Hab_Name))
ggplot()+ geom_sf(data = Habitation_Buffer_1000, fill = "Yellow") + geom_sf(data = Habitation, size=1, color = "Red")+ geom_sf(data = Road_Network, color = "Blue") + geom_sf_text(data = Habitation, aes(label  = Hab_Name))
library(dplyr)
st_contains(x = Habitation_Buffer_1000 %>% filter(Hab_Name=="Ghanshyampur"), y = Road_Network)
st_contains(x = Habitation_Buffer_1000 %>% filter(Hab_Name=="Ghanshyampur"), y = Road_Network)
#Visualise the geometrical binary predicate st_contains()
ggplot() + geom_sf(data = Habitation_Buffer_1000 %>% filter(Hab_Name=="Ghanshyampur"), fill = "yellow") + geom_sf(data = Habitation %>% filter (Hab_Name == "Ghanshyampur"), color = "Red") + geom_sf(data = Road_Network%>% filter(id==76), colour = "green")
st_intersects(x = Habitation_Buffer_1000 %>% filter(Hab_Name=="Ghanshyampur"), y = Road_Network)
ggplot() + geom_sf(data = Habitation_Buffer_1000 %>% filter(Hab_Name=="Ghanshyampur"), fill = "yellow") + geom_sf(data = Habitation %>% filter (Hab_Name == "Ghanshyampur"), color = "Red") + geom_sf(data = Road_Network%>% filter(id==76|id==82|id ==10| id ==39 | id ==87 |  id ==23), colour = "green")
list(rbind(c(19.23223346469867, 72.8291313599569), c(19.23032900003229, 72.8408901642962), c(19.219671694551387, 72.8406755875747), c(19.21979326467101, 72.83398079386325), c(19.21955012434183, 72.82883095254678), c(19.222629875265547, 72.82741474618474), c(19.23223346469867, 72.8291313599569)))
Gorai_Plot_1<- list(rbind(c(19.23223346469867, 72.8291313599569), c(19.23032900003229, 72.8408901642962), c(19.219671694551387, 72.8406755875747), c(19.21979326467101, 72.83398079386325), c(19.21955012434183, 72.82883095254678), c(19.222629875265547, 72.82741474618474), c(19.23223346469867, 72.8291313599569)))
Gorai_Plot_2<- list(rbind(c(19.230774727784645, 72.83745693675188), c(19.23028847926755, 72.8408901642962), c(19.23028847926755, 72.84569668285825), c(19.231098892662963, 72.85659718031145), c(19.221090007019825, 72.85269188397979), c(19.21946907748709, 72.8406755875747), c(19.219752741309385, 72.83402370920757), c(19.230774727784645, 72.83745693675188)))
#Converting the list in to polygon object
st_polygon(x = Gorai_Plot_1)
Gorai_Plot_1_Polygon<- st_polygon(x = Gorai_Plot_1)
Gorai_Plot_2_Polygon<- st_polygon(x = Gorai_Plot_2)
ggplot()+ geom_sf(data = Gorai_Plot_1_Polygon)+ geom_sf(data = Gorai_Plot_2_Polygon)
Gorai_Plot_1_Polygon<- st_sfc(Gorai_Plot_1_Polygon, crs = 4326)
st_geometry(Gorai_Plot_2_Polygon)
st_geometry(Gorai_Plot_1_Polygon)
st_area(Gorai_Plot_1_Polygon)
st_area(Gorai_Plot_2_Polygon)
Gorai_Plot_2_Polygon<- st_sfc(Gorai_Plot_2_Polygon, crs = 4326)
#Plot polygons to verify
ggplot()+geom_sf(data = Gorai_Plot_1_Polygon, fill = "red")+geom_sf(data = Gorai_Plot_2_Polygon, fill = "green")
#Plot polygons to verify
ggplot()+geom_sf(data = Gorai_Plot_1_Polygon, color = "red")+geom_sf(data = Gorai_Plot_2_Polygon, color = "green")
Gorai_Plot1_sf<- st_sf(Gorai_Plot_1_Polygon)
View(Gorai_Plot1_sf)
Gorai_Intersection<- st_intersection(x = Gorai_Plot_1_Polygon, y = Gorai_Plot_2_Polygon)
Gorai_Union<- st_union(x = Gorai_Plot_1_Polygon, y = Gorai_Plot_2_Polygon)
Gorai_Difference<- st_difference(x = Gorai_Plot_1_Polygon, y = Gorai_Plot_2_Polygon)
#Visualise the geoprocessing Output
ggplot()+ geom_sf(data = Gorai_Intersection)
ggplot()+ geom_sf(data = Gorai_Union)
ggplot()+ geom_sf(data = Gorai_Difference)
#Near Analysis Example
st_nearest_feature(x = Habitation_Layer %>% filter(Hab_Name=="lalapatti"), y = Road_Layer)
#Near Analysis Example
st_nearest_feature(x = Habitation %>% filter(Hab_Name=="lalapatti"), y = Road_Layer)
#Near Analysis Example
st_nearest_feature(x = Habitation %>% filter(Hab_Name=="lalapatti"), y = Road_Network)
st_nearest_feature(x = Habitation_Layer %>% filter(Hab_Name=="lalapatti"), y = Road_Layer)
#Near Analysis Example
st_nearest_feature(x = Habitation %>% filter(Hab_Name=="Ghanshyampur"), y = Road_Network)
save.image(".Rdata")
q()
